{
  "hash": "6dc50fb0f6030dcfd42b42fd1a046b14",
  "result": {
    "markdown": "---\ntitle: \"Model\"\nformat:\n  html:\n    code-fold: true\n---\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n```\n:::\n\n\n## Get Data\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport duckdb\nfrom palmerpenguins import penguins\n\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]\n```\n:::\n:::\n\n\n## Define Model and Fit\n\n\n::: {.cell}\n\n```{.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n## Get some information\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2 0.8555368759537614\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Intercept {model.intercept_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIntercept 2169.269720939398\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Columns {X.columns}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\nb = board_folder('data/model', allow_pickle_read = True)\nvetiver_pin_write(b, v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240216T134847Z-a6f9b\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype = True)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#from vetiver import prepare_docker\n#prepare_docker(b, 'penguin_model')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\n\nreq_data = {\n  \"bill_length_mm\": 0,\n  \"species_Chinstrap\": False,\n  \"species_Gentoo\": False,\n  \"sex_male\": False\n}\nreq = requests.post('http://127.0.0.1:8080/predict', json = [req_data])\nres = req.json().get('predict')[0]\nprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2169.269720939398\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nreq <- httr2::request(\"http://127.0.0.1:8080/predict\") |>\n  httr2::req_body_json(\n    list(\n      list(\n        \"bill_length_mm\" = 0,\n        \"species_Chinstrap\" = FALSE,\n        \"species_Gentoo\" = FALSE,\n        \"sex_male\" = FALSE\n      )\n    )\n  ) |>\n  httr2::req_perform()\nres <- httr2::resp_body_json(req)$predict[[1]]\nres\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2169.27\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ncon.close()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}