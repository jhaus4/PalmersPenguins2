renv::init()
renv::snapshot()
reticulate::repl_python()
reticulate::repl_python()
from vetiver import VetiverModel
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
from vetiver import VetiverModel
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
from pins import board_folder
from vetiver import vetiver_pin_write
b = board_folder('data/model', allow_pickle_read = True)
vetiver_pin_write(b, v)
app = VetiverAPI(v, check_prototype = True)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
app.run(port = 8080)
app.run(port = 8080)
exit
install.packages(DBI)
install.packages("DBI")
install.packages("duckdb")
#| warning: false
#| message: false
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
?dbDisconnect
DBI::dbDisconnect(con)
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
df.head(3)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
df.head(3)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
from pins import board_folder
from vetiver import vetiver_pin_write
b = board_folder('data/model', allow_pickle_read = True)
vetiver_pin_write(b, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
from vetiver.server import vetiver_endpoint
endpoint = vetiver_endpoint('http://127.0.0.1:8080')
vetiver.prepare_docker(b, 'penguins_model')
from vetiver import prepare_docker
prepare_docker(b, 'penguins_model')
from pins import board_folder
from vetiver import vetiver_pin_write
b = board_folder('data/model', allow_pickle_read = True)
vetiver_pin_write(b, v)
from vetiver import prepare_docker
prepare_docker(b, 'penguins_model')
from vetiver import prepare_docker
prepare_docker(b, 'penguin_model')
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
print(res)
quit
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
library(httr2)
install.packages("httr2")
library(httr2)
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
res <- httr2::resp_body_json(req)$predict[[1]]
library(httr2)
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
res <- httr2::resp_body_json(req)$predict[[1]]
res
shiny::runApp('PalmerPenguins')
runApp('PalmerPenguins')
install.packages("log4r")
runApp('PalmerPenguins')
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
con.close()
exit
library("dbplyer")
library("dbplyr")
install.packages("dbplyr")
renv::snapshot()
reticulate::repl_python()
con.close()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
from pins import board_folder
from vetiver import vetiver_pin_write
b = board_folder('data/model', allow_pickle_read = True)
vetiver_pin_write(b, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#from vetiver import prepare_docker
#prepare_docker(b, 'penguin_model')
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
print(res)
quit
library(httr2)
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
reticulate::repl_python()
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
